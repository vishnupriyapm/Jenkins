pipeline {
    agent any

    stages {
        stage('Git checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/jglick/simple-maven-project-with-tests.git']]])
            }
        }
    stage('Sonar') {
            steps {
                withSonarQubeEnv('sonar-server'){
                sh '/opt/apache-maven-3.8.6/bin/mvn -f /home/ubuntu/.jenkins/workspace/Declarative-pipeline/pom.xml sonar:sonar'
                }            
          }
        }
    stage('Build') {
            steps {
                //sh 'export PATH=java-11-openjdk-amd64/bin:/usr/lib/jvm/java-11-openjdk-amd64/bin:M2_HOME:/usr/lib/jvm/java-11-openjdk-amd64/bin:/opt/apache-maven-3.8.6/bin/'
                //sh 'mvn -f /home/ubuntu/.jenkins/workspace/Declarative-pipeline/pom.xml clean install'
                sh '/opt/apache-maven-3.8.6/bin/mvn -f /home/ubuntu/.jenkins/workspace/Declarative-pipeline/pom.xml clean install'         
          }
        }
    stage('Artifactory Upload') {
            steps {
                rtUpload (
                 serverId: 'jfrog-server',
    spec: '''{
          "files": [
            {
              "pattern": "/home/ubuntu/.jenkins/workspace/Declarative-pipeline/target/*.jar",
              "target": "test-sudhan/"
            }
          ]
    }''',
 
    // Optional - Associate the downloaded files with the following custom build name and build number,
    // as build dependencies.
    // If not set, the files will be associated with the default build name and build number (i.e the
    // the Jenkins job name and number).
    buildName: 'Sudhan Build',
    buildNumber: "${env.BUILD_NUMBER}")
          }
        }
    }
}
